generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id         String    @id @default(uuid()) 
  username   String    @unique
  profilePic String?
  bio        String?
  email      String    @unique
  password   String
  token      String?
  createdAt  DateTime  @default(now())

  userStatus String?

  followers Int   @default(0)
  following Int   @default(0)
  postCount Int @default(0)

  likenessScore Float? @default(0.0) 
  badges      Json? 

  sentRequests FriendReq[]  @relation("senderFriendReq")
  receivedRequests FriendReq[] @relation("receiverFriendReq")

  userFriends   Friendship[] @relation("userFriend")
  userFriendsOf Friendship[] @relation("FriendOf")

  notificationSent Notifications[] @relation("sentBy")
  notificationReceived Notifications[] @relation("sentTo")

  
  conversations1 Conversation[] @relation("User1Conversations")
  conversations2 Conversation[] @relation("User2Conversations")

  messagesSent Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
}

model FriendReq{
  id String @id @default(uuid())
  senderId String
  receiverId String
  friendshipId  String?
  sender User @relation("senderFriendReq",fields: [senderId], references: [id])
  receiver User @relation("receiverFriendReq",fields: [receiverId], references: [id])
  accepted Boolean @default(false)

  @@unique([senderId,receiverId])
}

model Friendship{
  id String @id @default(uuid())
  userId String
  friendId String
  user User @relation("userFriend",fields: [userId], references: [id])
  friend User @relation("FriendOf",fields: [friendId], references: [id])

  @@unique([userId,friendId])
  @@unique([friendId, userId])
}

model Notifications{
  id String @id @default(uuid())
  senderId String
  receiverId String
  type  NotificationsType
  title String
  content String
  createdAt String
  read  Boolean @default(false)
  sender User @relation("sentBy", fields: [senderId], references: [id])
  sentBy User @relation("sentTo",fields: [receiverId],references: [id])
}

model Conversation {
  id             String    @id @default(uuid())
  conversationId String
  senderId       String
  receiverId     String

  sender         User      @relation("User1Conversations", fields: [senderId], references: [id])
  receiver       User      @relation("User2Conversations", fields: [receiverId], references: [id])

  messages       Message[] @relation("ConversationMessages")

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([senderId, receiverId]) 
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  receiverId     String
  conversationId String
  content        String
  createdAt      DateTime     @default(now())

  sender         User         @relation("MessagesSent", fields: [senderId], references: [id])
  receiver       User         @relation("MessagesReceived", fields: [receiverId], references: [id])
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
}

enum NotificationsType{
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  MESSAGE_RECEIVED
}